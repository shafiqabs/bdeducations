<?php

namespace Setting\Bundle\ToolBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Setting\Bundle\AppearanceBundle\Entity\Menu;

/**
 * SiteSettingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SiteSettingRepository extends EntityRepository
{

    public function globalOptionSetting($user)
    {
        $em = $this->_em;

            $reEntity = $em->getRepository('SettingToolBundle:SiteSetting')->findOneBy(array('user'=>$user));
            if(empty($reEntity) && $user){

                $entity = New SiteSetting();
                $entity->setUser($user);
                $em->persist($entity);
                $em->flush();

            }

    }

    public  function insertSettingMenu($user){

            $em = $this->_em;

            $reEntity = $em->getRepository('SettingToolBundle:SiteSetting')->findOneBy(array('user'=>$user));

            if($reEntity){
                $syndicates = $reEntity->getSyndicates();
                foreach($syndicates as $syndicate ){
                    $id = $syndicate->getId();
                    $syndicate = $em->getRepository('SettingContentBundle:Syndicate')->find($id);

                    if(!empty($entity)){

                        $menu = $syndicate->getMenu();
                        $menuSlug = $syndicate->getSlug();
                        $uniqueCode = $syndicate->getSlug();

                        $entity = New Menu();
                        $entity->setSyndicate($syndicate);
                        $entity->setMenu($menu);
                        $entity->setMenuSlug($menuSlug);
                        $entity->setUser($user);
                        $entity->setUniqueCode($uniqueCode);
                        $entity->setSiteSetting($reEntity->getId());
                        $em->persist($entity);

                    }
                }

                $em->flush();
            }

    }

    public  function updateSettingMenu($reEntity){


        if($reEntity){
            $this->createSyndicateMenu($reEntity);
            $this->createModuleMenu($reEntity);
            $this->createSyndicateModuleMenu($reEntity);

        }

    }

    public function createSyndicateMenu($reEntity)
    {

        $em = $this->_em;

        $syndicates = $reEntity->getSyndicates();

        $checkEntity = $em->getRepository('SettingAppearanceBundle:Menu')->findBy(array('siteSetting'=>$reEntity));

        $insData=array();
        $dbData=array();

        foreach($syndicates as $module ){
            $insData[] = $module->getId();
        }
        foreach($checkEntity as $module ){

            if($module->getSyndicate()){

                $dbData[] = $module->getSyndicate()->getId();
            }
        }
        $removeData = array_diff($dbData,$insData);
        if(!empty($removeData)){
            $this->removeExistingMenu('syndicate',$removeData,$reEntity);
        }
        $insertData = array_diff($insData,$dbData);

        foreach($insertData as $syndicate ){


            $synEntity = $em->getRepository('SettingToolBundle:Syndicate')->find($syndicate);
            if(!empty($synEntity)){

                    $menu = $synEntity->getName();
                    $menuSlug = $synEntity->getSlug();

                    $entity = New Menu();
                    $entity->setSyndicate($synEntity);
                    $entity->setMenu($menu);
                    $entity->setMenuSlug($menuSlug);
                    $entity->setUser($reEntity->getUser());
                    $entity->setSiteSetting($reEntity);
                    $em->persist($entity);

            }
        }

        $em->flush();

    }
    public function createModuleMenu($reEntity)
    {

        $em = $this->_em;

        $modules = $reEntity->getModules();
        $checkEntity = $em->getRepository('SettingAppearanceBundle:Menu')->findBy(array('siteSetting'=>$reEntity));

        $insData=array();
        $dbData=array();

        foreach($modules as $module ){
            $insData[] = $module->getId();
        }
        foreach($checkEntity as $module ){

           if($module->getModule()){

               $dbData[] = $module->getModule()->getId();
           }
        }
        $removeData = array_diff($dbData,$insData);
        if(!empty($removeData)){
            $this->removeExistingMenu('module',$removeData,$reEntity);
        }
        $insertData = array_diff($insData,$dbData);

        foreach($insertData as $module ){

            $modEntity = $em->getRepository('SettingToolBundle:Module')->find($module);
            if(!empty($modEntity)){

                $menu = $modEntity->getMenu();
                $menuSlug = $modEntity->getMenuSlug();

                $entity = New Menu();
                $entity->setModule($modEntity);
                $entity->setMenu($menu);
                $entity->setMenuSlug($menuSlug);
                $entity->setUser($reEntity->getUser());
                $entity->setSiteSetting($reEntity);
                $em->persist($entity);

            }
        }

        $em->flush();

    }
    public function createSyndicateModuleMenu($reEntity){

        $em = $this->_em;

        $syndicateModule = $reEntity->getSyndicateModules();

        $checkEntity = $em->getRepository('SettingAppearanceBundle:Menu')->findBy(array('siteSetting'=>$reEntity));

        $insData=array();
        $dbData=array();

        foreach($syndicateModule as $module ){
            $insData[] = $module->getId();
        }
        foreach($checkEntity as $module ){

            if($module->getSyndicateModule()){

                $dbData[] = $module->getSyndicateModule()->getId();
            }
        }
        $removeData = array_diff($dbData,$insData);
        if(!empty($removeData)){
            $this->removeExistingMenu('syndicateModule',$removeData,$reEntity);
        }
        $insertData = array_diff($insData,$dbData);

        foreach($insertData as $syndicateModule ){

            $synEntity = $em->getRepository('SettingToolBundle:SyndicateModule')->find($syndicateModule);
            if(!empty($synEntity)){

                $menu = $synEntity->getName();
                $menuSlug = $synEntity->getMenuSlug();

                $entity = New Menu();
                $entity->setSyndicateModule($synEntity);
                $entity->setMenu($menu);
                $entity->setMenuSlug($menuSlug);
                $entity->setUser($reEntity->getUser());
                $entity->setSiteSetting($reEntity);
                $em->persist($entity);

            }
        }

        $em->flush();

    }

    /*
     * This function use menu remove that are related syndicate.
     * **/

    public function removeExistingMenu($field,$removeData,$reEntity){

        $em =$this->_em;

        foreach($removeData as $data){
            $menuEntity = $em->getRepository('SettingAppearanceBundle:Menu')->findOneBy(array($field => $data ,'siteSetting'=> $reEntity ));
            if(!empty($menuEntity)){

                    $id = $menuEntity->getId();

                    /*
                    * This function use for delete menu only set by syndicate.
                    * Menu grouping remove syndicate related.
                    * **/

                    $groupingEntity = $em->getRepository('SettingAppearanceBundle:MenuGrouping')->findBy(array('menu'=>$id));
                    if(!$groupingEntity){
                        foreach($groupingEntity as $remove){
                            $groupingEntity = $em->getRepository('SettingAppearanceBundle:MenuGrouping')->find($id);
                            if (!empty($groupingEntity)) {
                                $em->remove($groupingEntity);
                            }

                        }

                    }

                    $em->remove($menuEntity);
            }
            $em->flush();

        }
    }
}
